<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dong Haoling&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-19T12:58:12.607Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dong Haoling</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS学习笔记 （9.18）</title>
    <link href="http://yoursite.com/2016/09/18/0918CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/18/0918CSS学习笔记/</id>
    <published>2016-09-18T14:58:27.526Z</published>
    <updated>2016-09-19T12:58:12.607Z</updated>
    
    <content type="html">&lt;h3 id=&quot;box-sizing&quot;&gt;&lt;a href=&quot;#box-sizing&quot; class=&quot;headerlink&quot; title=&quot;box-sizing&quot;&gt;&lt;/a&gt;&lt;strong&gt;box-sizing&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;CSS元素的盒模型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DE9pTLZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;box-sizing有以下属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content-box：&lt;strong&gt;默认值&lt;/strong&gt;。宽度和高度分别应用到元素的内容框。&lt;/li&gt;
&lt;li&gt;border-box：宽度和高度分别应用到元素的边框。也就是内容框的宽度和高度要减去border和padding的宽度。&lt;/li&gt;
&lt;li&gt;inherit：继承父元素的box-sizing属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;float&quot;&gt;&lt;a href=&quot;#float&quot; class=&quot;headerlink&quot; title=&quot;float&quot;&gt;&lt;/a&gt;&lt;strong&gt;float&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;float可以实现文字环绕图片。float的元素相当于在文档流里是不占空间的。设置为float的元素相当于脱离了文档流，飘出来，比如设置&lt;code&gt;float:left&lt;/code&gt;如果原先没有元素float，那么这个元素就会飘到最左边。如果之前有元素float,那么会紧贴那个元素float。bootstrap里的col-md-x系列就是用float实现的。最简单的实现可以如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.col-md-6 {
    float:left;
    width:50%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应的html如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class = &amp;quot;col-md-6&amp;quot;&amp;gt; 1 &amp;lt;/div&amp;gt;
&amp;lt;div class = &amp;quot;col-md-6&amp;quot;&amp;gt; 2 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;float有以下属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;left：元素向左浮动&lt;/li&gt;
&lt;li&gt;right：元素向右浮动&lt;/li&gt;
&lt;li&gt;none：&lt;strong&gt;默认值&lt;/strong&gt;，不浮动&lt;/li&gt;
&lt;li&gt;inherit：从父元素继承float属性的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;clear&quot;&gt;&lt;a href=&quot;#clear&quot; class=&quot;headerlink&quot; title=&quot;clear&quot;&gt;&lt;/a&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;clear用于清楚浮动。清楚受浮动影响的其他元素的包围效果。&lt;br&gt;这篇写得很好：&lt;a href=&quot;http://zh.learnlayout.com/clear.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/clear.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;section&amp;gt;...&amp;lt;/section&amp;gt;

.box {
  float: left;
  width: 200px;
  height: 100px;
  margin: 1em;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时的效果是：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/AiNttPW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;清楚浮动之后：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box {
  float: left;
  width: 200px;
  height: 100px;
  margin: 1em;
}
.after-box {
  clear: left;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果是：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/7ut3Dn8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;position&quot;&gt;&lt;a href=&quot;#position&quot; class=&quot;headerlink&quot; title=&quot;position&quot;&gt;&lt;/a&gt;&lt;strong&gt;position&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;position属性的属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：&lt;strong&gt;默认值&lt;/strong&gt;。设置为static表示不会被positioned。就固定在它的默认位置，之后设置的额外属性，如top, right, left, bottom都没有用。&lt;/li&gt;
&lt;li&gt;relative：relative表现的和static一样，除非添加了额外属性top, right, left, bottom来调整&lt;strong&gt;使其偏离正常位置&lt;/strong&gt;。其他元素不会调整位置来弥补它偏离后剩下的空隙。&lt;/li&gt;
&lt;li&gt;absolute：相对于最近的positioned祖先元素定位，如果没有positioned的祖先元素（即属性不是static的元素），那就是相对于body元素。（&lt;strong&gt;相对父元素定位&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixed：相对视窗固定定位，即便页面滚动，它还是会停留在相同的位置。和 relative 一样， top, right, bottom 和 left 属性都可用。如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.fixed {
    position:fixed;
    bottom:0;
    right:0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则使用了fixed这个class的元素就固定在页面的右下角。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;inherit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇写得很好：&lt;a href=&quot;http://zh.learnlayout.com/position.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/position.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;display&quot;&gt;&lt;a href=&quot;#display&quot; class=&quot;headerlink&quot; title=&quot;display&quot;&gt;&lt;/a&gt;&lt;strong&gt;display&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;每个元素都有一个默认的 display 值，这与元素的类型有关。对于大多数元素它们的默认值通常是 block 或 inline 。&lt;/p&gt;
&lt;p&gt;常见的块级元素（属性值为block）：&lt;br&gt;div, p, form, header, footer, section等。&lt;/p&gt;
&lt;p&gt;常见的行内元素有（属性值为inline）：span, a&lt;/p&gt;
&lt;p&gt;属性值为none的元素：如script元素。&lt;br&gt;display设为none和visibility不同，&lt;br&gt;把 display 设置成 none 不会保留元素本该显示的空间，但是 visibility: hidden; 还会保留。&lt;/p&gt;
&lt;p&gt;display属性的常见属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;li&gt;inline：可以把&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;元素的display属性值设为inline,就可以做水平菜单。&lt;/li&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inline-block：可以使用inline-box来创建行内块。不必用float来创建行内一块块的分区。可以多个块放在同一行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box2 {
  display: inline-block;
  width: 200px;
  height: 100px;
  margin: 1em;
}

&amp;lt;div class = &amp;quot;box2&amp;quot;&amp;gt;行内块&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;inline-block：&lt;a href=&quot;http://zh.learnlayout.com/inline-block-layout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/inline-block-layout.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;flex：采用flex方式布局。例子如：&lt;a href=&quot;http://zh.learnlayout.com/flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/flexbox.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;box-sizing&quot;&gt;&lt;a href=&quot;#box-sizing&quot; class=&quot;headerlink&quot; title=&quot;box-sizing&quot;&gt;&lt;/a&gt;&lt;strong&gt;box-sizing&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;CSS元素的盒模型：&lt;/p&gt;
&lt;p&gt;&lt;im
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS学习笔记 （9.17）</title>
    <link href="http://yoursite.com/2016/09/18/0917JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/18/0917JS学习笔记/</id>
    <published>2016-09-18T10:48:13.966Z</published>
    <updated>2016-09-19T12:44:11.546Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Array类型的方法&quot;&gt;&lt;a href=&quot;#Array类型的方法&quot; class=&quot;headerlink&quot; title=&quot;Array类型的方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;Array类型的方法&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;转换方法&quot;&gt;&lt;a href=&quot;#转换方法&quot; class=&quot;headerlink&quot; title=&quot;转换方法&quot;&gt;&lt;/a&gt;转换方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `toString()`：对数组里的每个元素调用toString()，然后用&amp;quot;,&amp;quot;连接数组。 
* `valueOf()`： 返回原数组
* `join()`： 接受一个参数，连接数组。

        var colors = [&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;]; 
        colors.length = 4; //设置数组长度为4，则第四项(colors[3])为undefined
         alert(colors.join(&amp;apos;||&amp;apos;) ) // 结果为：red||green||blue||， 因为undefined 的项toString()后的结果是空字符串
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;栈方法&quot;&gt;&lt;a href=&quot;#栈方法&quot; class=&quot;headerlink&quot; title=&quot;栈方法&quot;&gt;&lt;/a&gt;栈方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `push()`： 返回数组长度
* `pop()`： 返回最后一个元素
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;队列方法&quot;&gt;&lt;a href=&quot;#队列方法&quot; class=&quot;headerlink&quot; title=&quot;队列方法&quot;&gt;&lt;/a&gt;队列方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `shift()`： 返回第一个元素
`var item = colors.shift()`
* `unshift()`：在数组前端添加任意个项并返回新数组的长度

        var colors = new Array();
        var count = colors.unshift(&amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;); // colors = [&amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;重排序方法&quot;&gt;&lt;a href=&quot;#重排序方法&quot; class=&quot;headerlink&quot; title=&quot;重排序方法&quot;&gt;&lt;/a&gt;重排序方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `reverse()`： 反转数组项的顺序
* `sort()`： 默认会调用toString()方法转换数组项，然后比较数组元素的大小，从小到大排序。

    可以接受比较函数作为参数，如果第一个参数位于第二个参数之前，返回负数，如果两个参数相等，返回0，如果第一个参数位于第二个参数之后，返回负数。比较函数可如下：

        function compare(value1, value2) {
            if(value1 &amp;lt; value2) return-1;
            else if(value1 &amp;gt; value2) return 1;
            else return 0;
        }
        var values = [1,10,5,15];
        values.sort(compare);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;操作方法&quot;&gt;&lt;a href=&quot;#操作方法&quot; class=&quot;headerlink&quot; title=&quot;操作方法&quot;&gt;&lt;/a&gt;操作方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `concat()`：可以基于当前数组中的所有项创建一个新数组，首先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾。如果传递给concat()方法的是一个或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。所以该方法可以用来**连接两个或多个数组**。

        var a = [1,2,3]; 
        var b = [3,4];  
        var c = a.concat(&amp;quot;hi&amp;quot;, b); // c = [1,2,3,&amp;quot;hi&amp;quot;,3,4]          

* `slice()`：能够基于当前数组的一个或多个项创建一个新数组。接收两个参数，要返回项的起始和结束位置（返回的新数组不包括结束位置）。若只有一个参数，则返回从起始位置到当前数末尾的所有项。

        var a = [1,2,3,4,5];
        var b = a.slice(1); //b = [2,3,4,5] 
        var c = a.slice(1,4) //c = [2,3,4]
* `splice()`：用于向数组中部插入项。**返回从原数组中删除的项**。有以下三种用法：
    * 删除：指定2个参数，要删除的第一项的位置和要删除的项数。
    * 插入：向指定位置插入任意数量的项。指定3个参数：起始位置，0（要删除的项数为0），要插入的项。

            colors.splice(2,0,&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;) // 从位置2开始插入字符串&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;
    * 替换：可以向指定位置插入任意数量的项，且删除任意数量的项。指定3个参数：起始位置，要删除的项数，要插入的项。

            colors.splice(2,1,&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;) // 删除位置2的项，然后从位置2开始插入字符串&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;位置方法&quot;&gt;&lt;a href=&quot;#位置方法&quot; class=&quot;headerlink&quot; title=&quot;位置方法&quot;&gt;&lt;/a&gt;位置方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* `indexOf()`：返回查找的项在数组中的位置，从头开始查找
* `lastIndexOf()`：同样返回查找的项在数组中的位置，从数组末尾开始查找
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;迭代方法&quot;&gt;&lt;a href=&quot;#迭代方法&quot; class=&quot;headerlink&quot; title=&quot;迭代方法&quot;&gt;&lt;/a&gt;迭代方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;都接受一个函数作为传入参数，该函数会接收三个参数，数据项的值，该项在数组中的位置和数组对象本身。
* `every()`：传入一个函数，对数组中的每一项运行给定函数，每一项都返回true,则最后返回true。
* `filter()`：传入一个函数，对数组中的每一项运行给定函数，返回函数会返回true的项组成的数组。
* `forEach()`：传入一个函数，对数组中的每一项运行给定函数，没有返回值。
`var numbers = [1,2,3,4];`
`numbers.forEach(function(item, index, array){...})`
* `map()`：传入一个函数，对数组中的每一项运行给定函数，返回函数调用的结果组成的数组。
* `some()`：传入一个函数，对数组中的每一项运行给定函数，如果函数对任一项返回true，就返回true。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;归并方法&quot;&gt;&lt;a href=&quot;#归并方法&quot; class=&quot;headerlink&quot; title=&quot;归并方法&quot;&gt;&lt;/a&gt;归并方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;迭代数组中的所有项，构建一个最终返回的值。接受2个参数：在每一项上调用的函数，归并的初始值。传给函数的4个参数：前一个值，当前值，项的索引，数组对象。
* `reduce()`：从数组第一项开始
* `reduceRight()`：从数组最后一项开始

        var values = [1,2,3,4,5];
        var sum = values.reduce(function(prev, cur, index, array){
            return prev+cur;
        }); 
        console.log(sum) //15
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;&lt;strong&gt;AJAX&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。&lt;/p&gt;
&lt;h4 id=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#创建XMLHttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;创建XMLHttpRequest对象&quot;&gt;&lt;/a&gt;创建XMLHttpRequest对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
      xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
      xmlhttp=new ActiveXObjec(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;向服务器发送请求&quot;&gt;&lt;a href=&quot;#向服务器发送请求&quot; class=&quot;headerlink&quot; title=&quot;向服务器发送请求&quot;&gt;&lt;/a&gt;向服务器发送请求&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;    xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;demo_get2.asp?fname=Bill&amp;amp;lname=Gates&amp;quot;,true);
    xmlhttp.send();
open的三个参数：
* method:请求使用的方法
* url：请求的地址
* async:是否异步，true表示异步，如果异步，则需要加onreadystatechange函数。

        xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;test1.txt&amp;quot;,true);
        xmlhttp.send();
        xmlhttp.onreadystatechange=function()
          {
              if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200)
            {
                document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseText;
            }
         }
如果设置为async设置为false,则不需要加onreadystatechange函数。如果没有响应，则挂起应用程序，一般不推荐使用。

        xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;test1.txt&amp;quot;,false);
        xmlhttp.send();
        document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseText;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;服务器响应&quot;&gt;&lt;a href=&quot;#服务器响应&quot; class=&quot;headerlink&quot; title=&quot;服务器响应&quot;&gt;&lt;/a&gt;服务器响应&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* responseText属性：响应的是文本
* responseXML属性：响应的是XML

        xmlDoc=xmlhttp.responseXML;
        txt=&amp;quot;&amp;quot;;
        x=xmlDoc.getElementsByTagName(&amp;quot;ARTIST&amp;quot;);
        for (i=0;i&amp;lt;x.length;i++)
          {
              txt=txt + x[i].childNodes[0].nodeValue + &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
          }
        document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=txt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;XMLHttpRequest对象的重要属性&quot;&gt;&lt;a href=&quot;#XMLHttpRequest对象的重要属性&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest对象的重要属性&quot;&gt;&lt;/a&gt;XMLHttpRequest对象的重要属性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* onreadystatechange： 每当 readyState 属性改变时，就会调用该函数
* readyState
    * 0: 请求未初始化
    * 1: 服务器连接已建立
    * 2: 请求已接收
    * 3: 请求处理中
    * 4: 请求已完成，且响应已就绪
* status：200 = &amp;quot;OK&amp;quot;， 404 = &amp;quot;未找到页面&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;与-的区别&quot;&gt;&lt;a href=&quot;#与-的区别&quot; class=&quot;headerlink&quot; title=&quot;===与==的区别&quot;&gt;&lt;/a&gt;&lt;strong&gt;===与==的区别&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;：-不做类型转换，直接判等&quot;&gt;&lt;a href=&quot;#：-不做类型转换，直接判等&quot; class=&quot;headerlink&quot; title=&quot;===： 不做类型转换，直接判等&quot;&gt;&lt;/a&gt;===： 不做类型转换，直接判等&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 如果类型不同，就[不相等] 
1. 如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断） 
1. 如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。 
1. 如果两个值都是true，或者都是false，那么[相等]。 
1. 如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。 
1. 如果两个值都是null，或者都是undefined，那么[相等]。 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;：先做类型转换，再判等&quot;&gt;&lt;a href=&quot;#：先做类型转换，再判等&quot; class=&quot;headerlink&quot; title=&quot;==：先做类型转换，再判等&quot;&gt;&lt;/a&gt;==：先做类型转换，再判等&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 如果两个值类型相同，进行 === 比较。 
1. 如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较： 
    -  如果一个是null、一个是undefined，那么[相等]。 
    - 如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。 
    - 如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。 
    - 如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说。
    - 任何其他组合，都[不相等]。 

            var a = 3;
            var b = &amp;quot;3&amp;quot;;
            alert(a==b) //true，类型不同，会把字符串转化为数字
            alert(a===b) //false 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;&lt;strong&gt;正则&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;pattern：-regExpr-flag&quot;&gt;&lt;a href=&quot;#pattern：-regExpr-flag&quot; class=&quot;headerlink&quot; title=&quot;pattern：/regExpr/flag&quot;&gt;&lt;/a&gt;pattern：/regExpr/flag&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;* flag：
    * g：全局模式，发现第一个匹配串后依然继续匹配。
    * i：不区分大小写模式。
    * m：多行模式，到达一行文本末尾后依然匹配下一行。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;String的match-方法和RegExp的exec-方法基本相同。&quot;&gt;&lt;a href=&quot;#String的match-方法和RegExp的exec-方法基本相同。&quot; class=&quot;headerlink&quot; title=&quot;String的match()方法和RegExp的exec()方法基本相同。&quot;&gt;&lt;/a&gt;String的match()方法和RegExp的exec()方法基本相同。&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var text = &amp;quot;cat, bat, sat, fat&amp;quot;;
var pattern = /.at/;
//与pattern.exec(text)结果相同，但如果pattern=/.at/g,那么两者得到的matches会有所不同
var matches = text.match(pattern);
alert(matches.index); //0
alert(matches); //[&amp;quot;cat&amp;quot;]
alert(pattern.lastIndex); //0
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Array类型的方法&quot;&gt;&lt;a href=&quot;#Array类型的方法&quot; class=&quot;headerlink&quot; title=&quot;Array类型的方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;Array类型的方法&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;转换方法&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello my blog</title>
    <link href="http://yoursite.com/2016/03/02/first-blog/"/>
    <id>http://yoursite.com/2016/03/02/first-blog/</id>
    <published>2016-03-02T13:31:00.731Z</published>
    <updated>2016-03-02T13:52:27.948Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;试试中文&quot;&gt;&lt;a href=&quot;#试试中文&quot; class=&quot;headerlink&quot; title=&quot;试试中文&quot;&gt;&lt;/a&gt;试试中文&lt;/h3&gt;&lt;p&gt;######中文字体&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/02/hello-world/"/>
    <id>http://yoursite.com/2016/03/02/hello-world/</id>
    <published>2016-03-02T12:07:48.265Z</published>
    <updated>2016-03-02T12:07:48.267Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
